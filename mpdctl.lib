#!/usr/bin/env bash
#
# ############################################################################
# Project: scripts (none)
# File...: mpdctl.lib
# Created: Thursday, 2023/07/20 - 00:02:53
# Author.: @fbnmtz, (fabiano.matoz@gmail.com)
# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~~·~·~·~·~·~·~·~
# Last Modified: Wednesday, 2023/09/27 - 02:13:37
# Modified By..: @fbnmtz, (fabiano.matoz@gmail.com)
# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~~·~·~·~·~·~·~·~
# Version: 0.0.10.220
# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~~·~·~·~·~·~·~·~
# Description: 
#  >
# ############################################################################
# HISTORY:
#

_xLIB_MPDCTL_=true

# set ROFI command and arguments
_MENU_CMD_="rofi -no-config -dmenu -i -p"

# validates installation of required binaries
xrequirements rofi watch pgrep cut aw

_mpd_check_(){
  if [ "$f" != 'r' ] && ! pgrep mpd >/dev/null; then 
    echo "Error! MPD is not running."
    exit 1
  fi
}

mUpdate(){
  mpc update --wait; mpc rescan --wait
}

mPlayAll(){
  mpc listall | mpc add; mpc play
}

mListPlay(){
  local music index
  music=$(mpc playlist | $_MENU_CMD_ "Select one Music" -format "d%s"); 
  if [ -n "$music" ]; then 
    index=$(echo "$music" | cut -d '%' -f1) 
    echo "$music";
    echo "$index"
    mpc play "$index"
  fi
}

mPlaylists(){
  local menu_items choice
  menu_items="all;Play all songs\nclear;Empty current queue\n------\n$(_lists_info | sort -f)"
  choice=$(echo -en "$menu_items" | column -t -s ';' | $_MENU_CMD_ "Playlist Functions" | aw 1)

  if [ -n "$choice" ]; then
    case "$choice" in
      clear) queue_clear ;;
      all  ) queue_all   ;;
      *    ) queue_playlist "$choice";;
    esac
  fi
}

mWatch(){
  watch -n 1  mpc status
}

_lists_info(){
  for i in $(mpc lsplaylists); do 
    echo -en "$i;($(mpc playlist $i | wc -l) Músicas)\n" 
  done
}

queue_clear(){
  mpc clear
}

queue_all(){
  mpc listall | mpc add
}

queue_playlist(){
  mpc clear && mpc load "$choice" && mpc play 
}

mOptions(){
  if [ -n "$value" ]; then 
    for opt in $(echo "$value" | cut -d ',' -f1); do
      case "$opt" in
        s|single ) mpc single  ;;
        r|repeat ) mpc repeat  ;;
        z|shuffle) mpc shuffle ;;
        *        ) echo "Invalid option!" ;;
      esac
    done
  fi
}